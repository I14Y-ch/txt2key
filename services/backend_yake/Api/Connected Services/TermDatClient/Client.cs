//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Api.TermDatClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Returns a list of classifications available to the API.
        /// </summary>
        /// <param name="languageCode">Iso code of the language in which you want to receive the classifications. Supported is DE = German, FR = French, IT = Italian, RM = Romansh, EN = English. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ClassificationSummary>>> VClassificationAsync(string languageCode, string version)
        {
            return VClassificationAsync(languageCode, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of classifications available to the API.
        /// </summary>
        /// <param name="languageCode">Iso code of the language in which you want to receive the classifications. Supported is DE = German, FR = French, IT = Italian, RM = Romansh, EN = English. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<ClassificationSummary>>> VClassificationAsync(string languageCode, string version, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (languageCode == null)
                throw new System.ArgumentNullException("languageCode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/Classification?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ClassificationSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<ClassificationSummary>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a list of collections available to the API.
        /// </summary>
        /// <param name="languageCode">Iso code of the language in which you want to receive the classifications. Supported is DE = German, FR = French, IT = Italian, RM = Romansh, EN = English. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CollectionSummary>>> VCollectionAsync(string languageCode, string version)
        {
            return VCollectionAsync(languageCode, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of collections available to the API.
        /// </summary>
        /// <param name="languageCode">Iso code of the language in which you want to receive the classifications. Supported is DE = German, FR = French, IT = Italian, RM = Romansh, EN = English. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<CollectionSummary>>> VCollectionAsync(string languageCode, string version, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (languageCode == null)
                throw new System.ArgumentNullException("languageCode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/Collection?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CollectionSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<CollectionSummary>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a list of entries to the given entry id's.
        /// </summary>
        /// <param name="inLanguageCode">Iso Code - Defines the language you want the metadata (collection, status, reliability, subject, office). Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>This will also include the entry details of this language (if available) in your result.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="outLanguageCode">Iso Code - Defines the language you will receive the entries language details (if available) in your results. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>This parameter can be omitted. You will only receive details in Bk.Termdat.Business.Public.Api.Resource.Models.GetEntriesParameter.InLanguageCode.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="entryIds">List of entry id's to get.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<EntryDetail>>> VEntryAsync(string inLanguageCode, string outLanguageCode, System.Collections.Generic.IEnumerable<int> entryIds, string version)
        {
            return VEntryAsync(inLanguageCode, outLanguageCode, entryIds, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of entries to the given entry id's.
        /// </summary>
        /// <param name="inLanguageCode">Iso Code - Defines the language you want the metadata (collection, status, reliability, subject, office). Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>This will also include the entry details of this language (if available) in your result.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="outLanguageCode">Iso Code - Defines the language you will receive the entries language details (if available) in your results. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>This parameter can be omitted. You will only receive details in Bk.Termdat.Business.Public.Api.Resource.Models.GetEntriesParameter.InLanguageCode.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="entryIds">List of entry id's to get.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<EntryDetail>>> VEntryAsync(string inLanguageCode, string outLanguageCode, System.Collections.Generic.IEnumerable<int> entryIds, string version, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (inLanguageCode == null)
                throw new System.ArgumentNullException("inLanguageCode");

            if (entryIds == null)
                throw new System.ArgumentNullException("entryIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/Entry?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("InLanguageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inLanguageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (outLanguageCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OutLanguageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(outLanguageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            foreach (var item_ in entryIds) { urlBuilder_.Append(System.Uri.EscapeDataString("EntryIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntryDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<EntryDetail>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a list of entries that match the given search parameters
        /// </summary>
        /// <param name="collectionIds">IDs of the collections to search in.
        /// <br/>If no ID is given, a default set of collections will be included (=VARIA).</param>
        /// <param name="classificationIds">IDs of the classifications to search in.
        /// <br/>If no ID is given, a default set of classifications will be included (=VARIA).</param>
        /// <param name="field_Terminus">Search in term field. Default = true</param>
        /// <param name="field_Name">Search in name field. Default = true</param>
        /// <param name="field_Abbreviation">Search in abbreviation field. Default = true</param>
        /// <param name="field_Phraseology">Search in phraseology field. Default = true</param>
        /// <param name="field_Definition">Search in definition field. Default = false</param>
        /// <param name="field_Note">Search in note field. Default = false</param>
        /// <param name="field_Context">Search in context field. Default = false</param>
        /// <param name="field_Source">Search in source fields (this includes TerminusSource, NameSource, AbbreviationSource, PhraseologySource, DefinitionSource, NoteSource, ContextSource and MetadataSource). Default = false</param>
        /// <param name="field_Metadata">Search in metadata field. Default = false</param>
        /// <param name="field_Country">Search in country field. Default = false</param>
        /// <param name="field_Comment">Search in comment field (defined in the entry header). Default = false</param>
        /// <param name="inLanguageCode">Iso Code - Defines the language you want to search in. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>All the metadata (e.g. office, collection, classification, etc.) will be provided in this language.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="maxEntryCount">Maximum number of entries returned by the search.
        /// <br/>Default: 25
        /// <br/>Maximum: 1000</param>
        /// <param name="outLanguageCode">Iso Code - Defines the language you want additional language entry results for your matched result. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>This parameter can be omitted, this will mimic the V1 API ReturnType=Summary. You will only receive details in Bk.Termdat.Business.Public.Api.Resource.Models.SearchParameter.InLanguageCode.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="searchTerm">Search term in Lucene Query Syntax: use the *, ? wildcards or the fuzzy operator ~
        /// <br/>See: https://lucenenet.apache.org/docs/4.8.0-beta00015/api/queryparser/Lucene.Net.QueryParsers.Classic.html
        /// <br/>Examples:
        /// <br/>- Exact:       Bund
        /// <br/>- Begins with: Schweiz*
        /// <br/>- Ends with:   *amt
        /// <br/>- Contains:    *term*
        /// <br/>- Fuzzy:       term~
        /// <br/>- Phrase:      "term term"</param>
        /// <param name="returnType">(Default) Detail: complete entries with synonyms in Bk.Termdat.Business.Public.Api.Resource.Models.SearchParameter.InLanguageCode and Bk.Termdat.Business.Public.Api.Resource.Models.SearchParameter.OutLanguageCode.
        /// <br/>Summary: entries with only metadata, without synonyms. Includes "hits" that tell you what matched within the synonyms.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<EntryDetail>>> VSearchAsync(System.Collections.Generic.IEnumerable<int> collectionIds, System.Collections.Generic.IEnumerable<int> classificationIds, bool? field_Terminus, bool? field_Name, bool? field_Abbreviation, bool? field_Phraseology, bool? field_Definition, bool? field_Note, bool? field_Context, bool? field_Source, bool? field_Metadata, bool? field_Country, bool? field_Comment, string inLanguageCode, int? maxEntryCount, string outLanguageCode, string searchTerm, ReturnType returnType, string version)
        {
            return VSearchAsync(collectionIds, classificationIds, field_Terminus, field_Name, field_Abbreviation, field_Phraseology, field_Definition, field_Note, field_Context, field_Source, field_Metadata, field_Country, field_Comment, inLanguageCode, maxEntryCount, outLanguageCode, searchTerm, returnType, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of entries that match the given search parameters
        /// </summary>
        /// <param name="collectionIds">IDs of the collections to search in.
        /// <br/>If no ID is given, a default set of collections will be included (=VARIA).</param>
        /// <param name="classificationIds">IDs of the classifications to search in.
        /// <br/>If no ID is given, a default set of classifications will be included (=VARIA).</param>
        /// <param name="field_Terminus">Search in term field. Default = true</param>
        /// <param name="field_Name">Search in name field. Default = true</param>
        /// <param name="field_Abbreviation">Search in abbreviation field. Default = true</param>
        /// <param name="field_Phraseology">Search in phraseology field. Default = true</param>
        /// <param name="field_Definition">Search in definition field. Default = false</param>
        /// <param name="field_Note">Search in note field. Default = false</param>
        /// <param name="field_Context">Search in context field. Default = false</param>
        /// <param name="field_Source">Search in source fields (this includes TerminusSource, NameSource, AbbreviationSource, PhraseologySource, DefinitionSource, NoteSource, ContextSource and MetadataSource). Default = false</param>
        /// <param name="field_Metadata">Search in metadata field. Default = false</param>
        /// <param name="field_Country">Search in country field. Default = false</param>
        /// <param name="field_Comment">Search in comment field (defined in the entry header). Default = false</param>
        /// <param name="inLanguageCode">Iso Code - Defines the language you want to search in. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>All the metadata (e.g. office, collection, classification, etc.) will be provided in this language.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="maxEntryCount">Maximum number of entries returned by the search.
        /// <br/>Default: 25
        /// <br/>Maximum: 1000</param>
        /// <param name="outLanguageCode">Iso Code - Defines the language you want additional language entry results for your matched result. Case insensitive, e.g. "DE" / "De" / "de" all yield the same result
        /// <br/>This parameter can be omitted, this will mimic the V1 API ReturnType=Summary. You will only receive details in Bk.Termdat.Business.Public.Api.Resource.Models.SearchParameter.InLanguageCode.
        /// <br/>Main languages: DE, FR, IT, EN, RM.
        /// <br/>All available languages:
        /// <br/>- DE = German
        /// <br/>- FR = French
        /// <br/>- IT = Italian
        /// <br/>- RM = Romansh
        /// <br/>- EN = English
        /// <br/>- LA = Latin
        /// <br/>- DA = Danish
        /// <br/>- FI = Finnish
        /// <br/>- NL = Dutch
        /// <br/>- PT = Portuguese
        /// <br/>- SV = Swedish
        /// <br/>- ES = Spanish
        /// <br/>- PL = Polish
        /// <br/>- CS = Czech
        /// <br/>- SK = Slovak
        /// <br/>- SL = Slovenian
        /// <br/>- HR = Croatian
        /// <br/>- HU = Hungarian
        /// <br/>- NO = Norwegian
        /// <br/>- IS = Icelandic
        /// <br/>- EL = Greek
        /// <br/>- TR = Turkish
        /// <br/>- KR = Korean
        /// <br/>- ZH = Chinese</param>
        /// <param name="searchTerm">Search term in Lucene Query Syntax: use the *, ? wildcards or the fuzzy operator ~
        /// <br/>See: https://lucenenet.apache.org/docs/4.8.0-beta00015/api/queryparser/Lucene.Net.QueryParsers.Classic.html
        /// <br/>Examples:
        /// <br/>- Exact:       Bund
        /// <br/>- Begins with: Schweiz*
        /// <br/>- Ends with:   *amt
        /// <br/>- Contains:    *term*
        /// <br/>- Fuzzy:       term~
        /// <br/>- Phrase:      "term term"</param>
        /// <param name="returnType">(Default) Detail: complete entries with synonyms in Bk.Termdat.Business.Public.Api.Resource.Models.SearchParameter.InLanguageCode and Bk.Termdat.Business.Public.Api.Resource.Models.SearchParameter.OutLanguageCode.
        /// <br/>Summary: entries with only metadata, without synonyms. Includes "hits" that tell you what matched within the synonyms.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<System.Collections.Generic.ICollection<EntryDetail>>> VSearchAsync(System.Collections.Generic.IEnumerable<int> collectionIds, System.Collections.Generic.IEnumerable<int> classificationIds, bool? field_Terminus, bool? field_Name, bool? field_Abbreviation, bool? field_Phraseology, bool? field_Definition, bool? field_Note, bool? field_Context, bool? field_Source, bool? field_Metadata, bool? field_Country, bool? field_Comment, string inLanguageCode, int? maxEntryCount, string outLanguageCode, string searchTerm, ReturnType returnType, string version, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (inLanguageCode == null)
                throw new System.ArgumentNullException("inLanguageCode");

            if (searchTerm == null)
                throw new System.ArgumentNullException("searchTerm");

            if (returnType == null)
                throw new System.ArgumentNullException("returnType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/Search?");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
            if (collectionIds != null)
            {
                foreach (var item_ in collectionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("CollectionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (classificationIds != null)
            {
                foreach (var item_ in classificationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("ClassificationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (field_Terminus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Terminus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Terminus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Abbreviation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Abbreviation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Abbreviation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Phraseology != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Phraseology") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Phraseology, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Definition != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Definition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Definition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Note != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Note") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Note, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Context != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Context") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Context, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Source != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Source") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Source, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Metadata != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Metadata") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Metadata, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (field_Comment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Field.Comment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(field_Comment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("InLanguageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inLanguageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (maxEntryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MaxEntryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxEntryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (outLanguageCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OutLanguageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(outLanguageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("SearchTerm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ReturnType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntryDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<System.Collections.Generic.ICollection<EntryDetail>>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse> VSystemstatusAsync(string version)
        {
            return VSystemstatusAsync(version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse> VSystemstatusAsync(string version, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v{version}/systemstatus");
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new SwaggerResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Classification information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ClassificationSummary
    {
        /// <summary>
        /// Id of the classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Language independent code of the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Language specific text of the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// Simple code and text representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CodeAndText
    {
        /// <summary>
        /// Language independent Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Language dependent text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// Collection information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CollectionSummary
    {
        /// <summary>
        /// Id of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Language independent code of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Language specific text of the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// Domain information.
    /// <br/>Part of the new TERMDAT 3.0 classification system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DomainSummary
    {
        /// <summary>
        /// Id of the domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Language specific text of the domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class EntryDetail
    {
        /// <summary>
        /// Entry Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Url to the entry in TERMDAT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeAndText Status { get; set; }

        [Newtonsoft.Json.JsonProperty("reliability", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeAndText Reliability { get; set; }

        [Newtonsoft.Json.JsonProperty("office", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OfficeSummary Office { get; set; }

        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionSummary Collection { get; set; }

        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassificationSummary Classification { get; set; }

        /// <summary>
        /// Assigned subjects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SubjectSummary> Subject { get; set; }

        /// <summary>
        /// Language dependent synonyms of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntryLanguageDetail> LanguageDetails { get; set; }

        /// <summary>
        /// Search hits within the synonyms. Only provided, when you use "search" API with ReturnType=Summary. Not included for ReturnType=Detail or "entry" API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>> Hits { get; set; }

    }

    /// <summary>
    /// Represents a language detail (a.k.a synonym) of an entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class EntryLanguageDetail
    {
        /// <summary>
        /// Id of the language detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Language ISO-Code of this detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageIsoCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageIsoCode { get; set; }

        /// <summary>
        /// Sequence number of the detail. Starts with 1 and grows sequentially within the same language. 1 is considered the preferred synonym.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sequence { get; set; }

        /// <summary>
        /// Field terminus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Terminus { get; set; }

        /// <summary>
        /// Field source of terminus. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminusSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminusSource { get; set; }

        /// <summary>
        /// Field name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Field source of name. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameSource { get; set; }

        /// <summary>
        /// Field phraseology.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phraseology", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phraseology { get; set; }

        /// <summary>
        /// Field source of phraseology. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phraseologySource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhraseologySource { get; set; }

        /// <summary>
        /// Field abbreviation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abbreviation { get; set; }

        /// <summary>
        /// Field source of abbreviation. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abbreviationSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbbreviationSource { get; set; }

        /// <summary>
        /// Field definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Definition { get; set; }

        /// <summary>
        /// Field source of definition. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("definitionSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefinitionSource { get; set; }

        /// <summary>
        /// Field note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// Field source of note. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noteSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoteSource { get; set; }

        /// <summary>
        /// Field context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }

        /// <summary>
        /// Field source of context. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextSource { get; set; }

        /// <summary>
        /// Field country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Field metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metadata { get; set; }

        /// <summary>
        /// Field source of metadata. Can contain markdown links, that are shown as links in the TERMDAT 3.0 UI. [Text](https://url).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadataSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSource { get; set; }

        /// <summary>
        /// References from this entry to a entry that contains a language detail in the same language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntryReferenceSummary> References { get; set; }

    }

    /// <summary>
    /// Represents a reference to an other entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class EntryReferenceSummary
    {
        /// <summary>
        /// Language dependent text of the reference type ("&lt;leer&gt;", "GEN", "SPE", oder "ANT" for German).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Text of the referenced entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// TERMDAT URL of the referenced entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Office information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class OfficeSummary
    {
        /// <summary>
        /// Id of the classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Language independent code of the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Language specific text of the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Return type for entry search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum ReturnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Detail")]
        Detail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Summary")]
        Summary = 1,

    }

    /// <summary>
    /// Subject information.
    /// <br/>Part of the new TERMDAT 3.0 classification system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SubjectSummary
    {
        /// <summary>
        /// Id of the classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Language specific text of the classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("domains", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomainSummary> Domains { get; set; }

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603